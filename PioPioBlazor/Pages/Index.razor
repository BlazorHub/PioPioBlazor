@page "/"

@using PioPioBlazor.Services
@inject TwitterService TwitterService

@if (_tweets == null)
{
    <div class="lds-facebook mx-auto">
        <div class="bg-blue-400"></div><div class="bg-blue-400"></div><div class="bg-blue-400"></div>
    </div>
}
else if (_tweets.Count() == 0)
{
    <h2 class="mb-10">You have reached the Twitter request limit. Please, try again in 10 - 15 minutes.</h2>
    <button class="bg-blue-400 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded" @onclick="() => {_retry = true;}">
        Try Again
    </button>
}
else
{
    <TagSelector TItem="string"
                 SelectableTags="_hashTags"
                 @bind-SelectedTags="_selectedHashTags" Filter="@((item,term) => item.ToLower().Contains(term.ToLower()))"
                 Placeholder="Select hashtags to filter your tweets..."
                 OnCreateTag="HandleCreateTag"
                 OnTagSelected="HandleSelectedTagsChange"
                 OnTagRemoved="HandleSelectedTagsChange">
        <TagTemplate>@context</TagTemplate>
    </TagSelector>

    <TagSelector TItem="string"
                 SelectableTags="_languages"
                 @bind-SelectedTags="_selectedLanguages" Filter="@((item,term) => item.ToLower().Contains(term.ToLower()))"
                 Placeholder="Select languages to filter your tweets..."
                 OnCreateTag="HandleCreateLanguageTag"
                 OnTagSelected="HandleSelectedTagsChange"
                 OnTagRemoved="HandleSelectedTagsChange">
        <TagTemplate>@context</TagTemplate>
    </TagSelector>

    <SearchBox Placeholder="Search among your Home Timeline tweets..." SearchTerm="_searchTerm" SearchTermChanged="HandleTextChange" />

    <h2 class="mb-8">@_filteredTweets.Count() tweets retrieved</h2>

    int i;
    @for (i = 0; i < _filteredTweets.Count() && i < _numberOfTweetsShown; i++)
    {
        <Tweet State="@_filteredTweets[i]" />
    }

    if (i < _filteredTweets.Count())
    {
        <button class="bg-blue-400 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded" @onclick="() => {_numberOfTweetsShown += 10;}">
            Load More Tweets
        </button>
    }
}

@code {
    private int _numberOfTweetsShown = 10;
    private bool _retry = false;
    private IEnumerable<Models.Tweet>
    _tweets;
    private List<Models.Tweet>
        _filteredTweets;
    private IEnumerable<string>
        _hashTags;
    private IEnumerable<string>
        _languages;
    private string _searchTerm;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || _retry)
        {
            // When execution reaches this point, the first *interactive* render
            // is complete. The component has an active connection to the browser.
            _tweets = await TwitterService.GetHomeTimelineTweets(_retry);
            _filteredTweets = new List<Models.Tweet>
                (_tweets);
            _hashTags = _tweets.SelectMany(t => t.HashTags).OrderBy(t => t);
            _languages = _tweets.Select(t => Models.Tweet.Languages[t.Language]).OrderBy(t => t);
            _retry = false;
            StateHasChanged();
        }
    }

    private IList<string>
        _selectedHashTags = new List<string>
            ();

    void HandleCreateTag(string tag)
    {
        _selectedHashTags.Add(tag);
    }

    void HandleTextChange(string searchTerm)
    {
        _searchTerm = searchTerm;
        _filteredTweets = FilterTweetsBySelectedTags().ToList();
    }

    IEnumerable<Models.Tweet>
        FilterTweetsBySelectedTags()
    {
        var filteredTweets = _tweets;
        var minSearchTermLength = 2;

        if (!string.IsNullOrWhiteSpace(_searchTerm) && (_searchTerm.Length > minSearchTermLength))
        {
            filteredTweets = filteredTweets.Where(t => t.Text.Contains(_searchTerm, StringComparison.InvariantCultureIgnoreCase));
        }

        if (_selectedHashTags.Count > 0)
        {
            filteredTweets = filteredTweets.Where(t => t.HashTags.Intersect(_selectedHashTags).Any());
        }

        if (_selectedLanguages.Count > 0)
        {
            filteredTweets = filteredTweets.Where(t => _selectedLanguages.Contains(Models.Tweet.Languages[t.Language]));
        }

        return filteredTweets;
    }

    void HandleSelectedTagsChange(string tag)
    {
        _filteredTweets = FilterTweetsBySelectedTags().ToList();
    }

    IList<string>
        _selectedLanguages = new List<string>
            ();

    void HandleCreateLanguageTag(string tag)
    {
        _selectedLanguages.Add(tag);
    }
}
@page "/"

@using PioPioBlazor.Services
@inject TwitterService TwitterService

@if (_tweets == null)
{
    <div class="lds-facebook mx-auto">
        <div class="bg-blue-300"></div><div class="bg-blue-300"></div><div class="bg-blue-300"></div>
    </div>
}
else if (_tweets.Count() == 0)
{
    <h2>You have reached the Twitter request limit. Please, try again in 10 - 15 minutes.</h2>
}
else
{
    <TagSelector TItem="string" SelectableTags="_hashTags" @bind-SelectedTags="Selected" Filter="@((item,term) => item.Contains(term))" Placeholder="Select tags to filter by..." OnCreateTag="HandleCreateTag" OnTagSelected="HandleSelectedTagsChange" OnTagRemoved="HandleSelectedTagsChange">
        <TagTemplate>@context</TagTemplate>
    </TagSelector>

    @foreach (var tweet in _filteredTweets)
    {
        <Tweet State="@tweet" />
    }
}

@code {
    private IEnumerable<Models.Tweet>
    _tweets;
    private IEnumerable<Models.Tweet>
        _filteredTweets;
    private IEnumerable<string>
        _hashTags;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // When execution reaches this point, the first *interactive* render
            // is complete. The component has an active connection to the browser.
            _tweets = await TwitterService.GetHomeTimelineTweets();
            _filteredTweets = new List<Models.Tweet>
                (_tweets);
            _hashTags = _tweets.SelectMany(t => t.HashTags);
            StateHasChanged();
        }
    }

    IList<string>
        Selected = new List<string>
            ();

    void HandleCreateTag(string tag)
    {
        Selected.Add(tag);
    }

    void HandleSelectedTagsChange(string tag)
    {
        if (Selected.Count > 0)
        {
            _filteredTweets = new List<Models.Tweet>
                (_tweets.Where(t => t.HashTags.Intersect(Selected).Any()));
        }
        else
        {
            _filteredTweets = new List<Models.Tweet>
                (_tweets);
        }
    }
}
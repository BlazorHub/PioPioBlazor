@page "/"

@using PioPioBlazor.Services
@inject TwitterService TwitterService

@if (_tweets == null)
{
    <div class="lds-facebook mx-auto">
        <div class="bg-blue-300"></div><div class="bg-blue-300"></div><div class="bg-blue-300"></div>
    </div>
}
else if (_tweets.Count() == 0)
{
    <h2>You have reached the Twitter request limit. Please, try again in 10 - 15 minutes.</h2>
}
else
{
    <TagSelector TItem="string"
                 SelectableTags="_hashTags"
                 @bind-SelectedTags="SelectedHashTags" Filter="@((item,term) => item.ToLower().Contains(term.ToLower()))"
                 Placeholder="Select tags to filter by..."
                 OnCreateTag="HandleCreateTag"
                 OnTagSelected="HandleSelectedTagsChange"
                 OnTagRemoved="HandleSelectedTagsChange">
        <TagTemplate>@context</TagTemplate>
    </TagSelector>

    <TagSelector TItem="string"
                 SelectableTags="_languages"
                 @bind-SelectedTags="SelectedLanguages" Filter="@((item,term) => item.ToLower().Contains(term.ToLower()))"
                 Placeholder="Select languages to filter by..."
                 OnCreateTag="HandleCreateLanguageTag"
                 OnTagSelected="HandleSelectedLanguagesChange"
                 OnTagRemoved="HandleSelectedLanguagesChange">
        <TagTemplate>@context</TagTemplate>
    </TagSelector>

    <h2 class="mb-8">@_filteredTweets.Count() tweets retrieved</h2>

    @foreach (var tweet in _filteredTweets)
    {
        <Tweet State="@tweet" />
    }
}

@code {
    private IEnumerable<Models.Tweet>
    _tweets;
    private IEnumerable<Models.Tweet>
        _filteredTweets;
    private IEnumerable<string>
        _hashTags;
    private IEnumerable<string>
        _languages;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // When execution reaches this point, the first *interactive* render
            // is complete. The component has an active connection to the browser.
            _tweets = await TwitterService.GetHomeTimelineTweets();
            _filteredTweets = new List<Models.Tweet>
                (_tweets);
            _hashTags = _tweets.SelectMany(t => t.HashTags).OrderBy(t => t);
            _languages = _tweets.Select(t => t.Language).OrderBy(t => t);
            StateHasChanged();
        }
    }

    IList<string>
        SelectedHashTags = new List<string>
            ();

    void HandleCreateTag(string tag)
    {
        SelectedHashTags.Add(tag);
    }

    void HandleSelectedTagsChange(string tag)
    {
        if (SelectedHashTags.Count > 0)
        {
            _filteredTweets = new List<Models.Tweet>
                (_tweets.Where(t => t.HashTags.Intersect(SelectedHashTags).Any()));
        }
        else
        {
            _filteredTweets = new List<Models.Tweet>
                (_tweets);
        }
    }

    IList<string>
        SelectedLanguages = new List<string>
            ();

    void HandleCreateLanguageTag(string tag)
    {
        SelectedLanguages.Add(tag);
    }

    void HandleSelectedLanguagesChange(string tag)
    {
        if (SelectedLanguages.Count > 0)
        {
            _filteredTweets = new List<Models.Tweet>
                (_tweets.Where(t => SelectedLanguages.Contains(t.Language)));
        }
        else
        {
            _filteredTweets = new List<Models.Tweet>
                (_tweets);
        }
    }

}